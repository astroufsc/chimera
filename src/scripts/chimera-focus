#! /usr/bin/env python
# -*- coding: iso-8859-1 -*-

# chimera - observatory automation system
# Copyright (C) 2006-2007  P. Henrique Silva <henrique@astro.ufsc.br>

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.


from chimera.core.cli import ChimeraCLI, action, parameter, ParameterType
from chimera.core.callback import callback
#from chimera.core.exceptions import ChimeraException

from chimera.interfaces.autofocus import StarNotFoundException, FocusNotFoundException
from chimera.interfaces.focuser import InvalidFocusPositionException, FocuserFeature
from chimera.interfaces.filterwheel import InvalidFilterPositionException
from chimera.util.sextractor import SExtractorException

from chimera.util.ds9 import DS9

import sys
import time
import os
import re


class ChimeraFocus (ChimeraCLI):

    def __init__(self):
        ChimeraCLI.__init__(
            self, "chimera-focus", "Focuser controller", 0.1, port=9003)

        self.addHelpGroup("FOCUS", "Focus")
        self.addInstrument(name="focuser",
                           cls="Focuser",
                           required=True,
                           helpGroup="FOCUS",
                           help="Focuser instrument to be used")
        self.addController(name="autofocus",
                           cls="Autofocus",
                           required=False,
                           helpGroup="FOCUS",
                           help="Autofocus controller to be used")

        self.addHelpGroup("AUTOFOCUS", "Autofocus")
        self.addParameters(dict(name="autofocus_step",
                                long="step",
                                type="int",
                                helpGroup="AUTOFOCUS",
                                help="Defines autofocus step.",
                                metavar="STEP",
                                default=500),
                           dict(name="autofocus_exptime",
                                short="-t",
                                long="exptime",
                                type="float",
                                helpGroup="AUTOFOCUS",
                                help="Defines autofocus frame exposure time.",
                                metavar="EXPTIME",
                                default=10.0),
                           dict(name="autofocus_debug",
                                long="debug",
                                helpGroup="AUTOFOCUS",
                                help="Run an autofocus debug session using data from PREVIOUS_RUN_DIR.",
                                metavar="PREVIOUS_RUN_DIR",
                                default=""),
                           dict(name="autofocus_nodisplay",
                                long="disable-display",
                                type=ParameterType.BOOLEAN,
                                helpGroup="AUTOFOCUS",
                                help="Disable interactive display during autofocus",
                                default=False),
                           dict(name="autofocus_filter",
                                long="filter",
                                helpGroup="AUTOFOCUS",
                                help="Which filter to use in the autofocus run.",
                                default="use-current-filter"))

        self.addHelpGroup("COMMANDS", "Commands")

    @parameter(long="range",
               helpGroup="AUTOFOCUS",
               default="1000-6000",
               help="Defines autofocus focuser range to be covered."
               "Use start-end, as in 1000-6000 to run from 1000 to 6000.",
               metavar="START-END")
    def autofocus_range(self, value):
        r = re.compile("(?P<start>\d+)-(?P<end>\d+)")
        m = r.match(value)
        if not m:
            raise ValueError("Invalid start-end range")

        start, end = m.groups()
        start = int(start)
        end = int(end)
        return (start, end)

    @action(long="in",
            type="int",
            help="Move N steps IN",
            metavar="N",
            helpGroup="COMMANDS")
    def move_in(self, options):
        self.out("Moving %d steps IN ... " % options.move_in, end="")

        try:
            self.focuser.moveIn(options.move_in)
        except InvalidFocusPositionException:
            self.exit("Invalid position. Current position %d,"
                      " target position %d, valid range %d-%d." % (self.focuser.getPosition(),
                                                                   self.focuser.getPosition() -
                                                                   int(options.move_in),
                                                                   self.focuser.getRange()[0], self.focuser.getRange()[1]))

        self.out("OK")

        self._currentPosition(options)

    @action(long="out",
            type="int",
            help="Move N steps OUT",
            metavar="N",
            helpGroup="COMMANDS")
    def move_out(self, options):
        self.out("Moving %d steps OUT ... " % options.move_out, end="")

        try:
            self.focuser.moveOut(options.move_out)
        except InvalidFocusPositionException, e:
            self.exit("Invalid position. Current position %d,"
                      " target position %d, valid range %d-%d." % (self.focuser.getPosition(),
                                                                   self.focuser.getPosition() +
                                                                   int(options.move_out),
                                                                   self.focuser.getRange()[0], self.focuser.getRange()[1]))

        self.out("OK")

        self._currentPosition(options)

    @action(long="to",
            type="int",
            help="Move to POSITION",
            metavar="POSITION",
            helpGroup="COMMANDS")
    def move_to(self, options):
        self.out("Moving to %d ... " % options.move_to, end="")

        try:
            self.focuser.moveTo(options.move_to)
        except InvalidFocusPositionException:
            self.exit("Invalid position, must be between %d and %d," %
                      self.focuser.getRange())

        self.out("OK")

    @action(short="i",
            help="Print focuser current information",
            helpGroup="COMMANDS")
    def info(self, options):

        self.out("=" * 40)
        self.out("Focuser: %s (%s)" %
                 (self.focuser.getLocation(), self.focuser["device"]))
        self._currentPosition(options)
        self.out("Valid range: %d-%d" % self.focuser.getRange())

        if self.focuser.supports(FocuserFeature.TEMPERATURE_COMPENSATION):
            self.out("Temperature: %.2f oC" % self.focuser.getTemperature())

        if self.options.verbose:
            self.out("=" * 40)
            self.out("Supports:")
            for feature in FocuserFeature:
                self.out(
                    "\t%-25s" % str(feature), str(bool(self.focuser.supports(feature))))
        self.out("=" * 40)

    @action(helpGroup="AUTOFOCUS",
            help="Start an autofocus session using the selected parameters."
            " You can select a focuser range and the size of the step for the sequence."
            " This option is exclusive, you cannot move manually at the same time.")
    def auto(self, options):

        if not self.autofocus:
            self.exit(
                "No Autofocus controller available. Try --autofocus=..., or --help.")

        ds9 = None

        if not options.autofocus_nodisplay:
            try:
                ds9 = DS9(open=True)
            except IOError:
                pass

        @callback(self.localManager)
        def stepComplete(position, star, frame):

            self.out("#%04d (%4d, %4d) FWHM: %8.3f FLUX: %-9.3f (%s)" % (position,
                                                                         star["XWIN_IMAGE"], star[
                                                                             "YWIN_IMAGE"],
                                                                         star["FWHM_IMAGE"], star[
                                                                             "FLUX_BEST"],
                                                                         star["CHIMERA_FLAGS"]))
            if ds9:
                ds9.displayFile(frame.filename())
                ds9.set("regions command { circle %d %d %d}" % (
                    int(star["XWIN_IMAGE"]), int(star["YWIN_IMAGE"]), int(star["FWHM_IMAGE"])))
                ds9.set("scale mode 99.5")
                #ds9.xpaset("pan to %d %d physical" % (int(star["XWIN_IMAGE"]), int(star["YWIN_IMAGE"])))

        self.autofocus.stepComplete += stepComplete

        start, end = options.autofocus_range

        if options.autofocus_debug is "":
            debug = False
        else:
            debug = os.path.realpath(options.autofocus_debug)

        if options.autofocus_filter == "use-current-filter":
            filter = False
        else:
            filter = options.autofocus_filter

        try:
            if not debug:
                self.out("Looking for a star to focus on... (will try up to %d times) ..." % self.autofocus[
                         "max_tries"])

            result = self.autofocus.focus(exptime=options.autofocus_exptime,
                                          start=start,
                                          end=end,
                                          step=options.autofocus_step,
                                          minmax=(0, 30),
                                          debug=debug,
                                          filter=filter)

            self.out("Best focus position found at %d." % result["best"])
            self.out("Moving focuser to %d .. OK" % result["best"])

        except IOError, e:
            self.exit(str(e))
        except FocusNotFoundException, e:
            self.exit(str(e))
        except StarNotFoundException, e:
            self.exit(str(e))
        except SExtractorException:
            self.exit(
                "Couldn't find SExtractor. If you have it installed, please add it to yout PATH variable.")
        except InvalidFilterPositionException, e:
            self.exit(str(e))

        time.sleep(1)

    def _currentPosition(self, options):
        return self.out("Current focuser position: %s" % self.focuser.getPosition())


def main():
    cli = ChimeraFocus()
    cli.run(sys.argv)
    cli.wait()

if __name__ == '__main__':

    main()
